---
title: "Homework6"
author: "Colleen Yancey"
date: "February 25, 2018"
output: html_document
editor_options: 
  chunk_output_type: inline
---

#### 1. Set up a new `.Rmd` file for this exercise. Copy and paste the code below into different code chunks, and then read the text and run the code chunks one at a time to see what they do. You probably won’t understand everything in the code, but this is a good start for seeing some realistic uses of ggplot. We will cover most of these details in the next few weeks.
```{r}
library(ggplot2) # for graphics
library(MASS) # for maximum likelihood estimation
```
To illustrate, we will generate some fake data here:
```{r}
#z <- rnorm(n=3000,mean=0.2)
#z <- data.frame(1:3000,z)
#names(z) <- list("ID","myVar")
```
</br> 

#### 2. Once the code is in and runs, try reading in your own .csv file into a data frame with this code chunk:

The data I will be using is part of my honors thesis. Specifically, it is the Hyphae bag analysis that I am currently working on. The data set is not yet complete but I think it is large enough to do this problem set. The data will inform me of hyphal growth rates over the course of one growing season in the ice storm plots.

#### 3. Once your data are in, go ahead and comment out the “fake data” that are simulated in the chunk below. At that point, if you compile the entire file, it should run all of the code on your own data. Be sure to add comments to the code and commentary to the .Rmd file so that you can go back to it later and understand and use the code in your work.

```{r}
z <- read.table("ECMScores.csv",header=TRUE,sep=",", stringsAsFactors=FALSE)
str(z)
summary(z)

```

###Histogram Plot
Plot a histogram of the data, using a modification of the code from lecture. Here we are switching from qplot to ggplot for more graphics options. We are also rescaling the y axis of the histogram from counts to density, so that the area under the histogram equals 1.0.
```{r}
# this will make a histogram
p1 <- ggplot(data=z, aes(x=ECM.tips.cm, y=..density..)) +
  geom_histogram(color="grey60",fill="coral",size=0.2) 
print(p1)
```

### Emprical Density Curve
Now modify the code to add in a kernel density plot of the data. This is an empirical curve that is fitted to the data. It does not assume any particular probability distribution, but it smooths out the shape of the histogram:
```{r}
# this will make the data fit to a smoother curve
p1 <-  p1 +  geom_density(linetype="dotted",size=0.75)
print(p1)
```

### Find the Parameters of rnorm


```{r}
normPars <- fitdistr(z$ECM.tips.cm,"normal")
print(normPars)
```
The above function returns the mean and standard deviation of the data set.
```{r}
str(normPars)
print(normPars)
```
This function spits out the general structure and information of your data set.
```{r}
normPars$estimate["mean"]
```
The above function returns the mean of the data set.

###Plot Normal Probability Density
Now let’s call the dnorm function inside ggplot’s stat_function to generate the probability density for the normal distribution. Read about  stat_function in the help system to see how you can use this to add a smooth function to any ggplot. Note that we first get the maximum likelihood parameters for a normal distribution fitted to thse data by calling fitdistr. Then we pass those parameters (meanML and sdML to  stat_function:
```{r}
meanML <- normPars$estimate["mean"]
sdML <- normPars$estimate["sd"]

xval <- seq(0,max(z$ECM.tips.cm),len=length(z$ECM.tips.cm))

 stat <- stat_function(aes(x = xval, y = ..y..), fun = dnorm, colour="red", n = length(z$Height), args = list(mean = meanML, sd = sdML))
 p1 + stat
```
###Plot Exponential Curve
```{r}
expoPars <- fitdistr(z$ECM.tips.cm,"exponential")
rateML <- expoPars$estimate["rate"]

stat2 <- stat_function(aes(x = xval, y = ..y..), fun = dexp, colour="blue", n = length(z$ECM.tips.cm), args = list(rate=rateML))
 p1 + stat + stat2
 
```
###Adding a uniform probability Curve
Dont use `fitdistr` for this!
```{r}
stat3 <- stat_function(aes(x = xval, y = ..y..), fun = dunif, colour="darkgreen", n = length(z$myVar), args = list(min=min(z$myVar), max=max(z$myVar)))
 p1 + stat + stat2 + stat3

```
### Plot Gamma Probability 
```{r}
gammaPars <- fitdistr(z$ECM.tips.cm,"gamma")
shapeML <- gammaPars$estimate["shape"]
rateML <- gammaPars$estimate["rate"]

stat4 <- stat_function(aes(x = xval, y = ..y..), fun = dgamma, colour="goldenrod", n = length(z$Height), args = list(shape=shapeML, rate=rateML))
 p1 + stat + stat2 + stat3 + stat4

```
### Adding the beta Probability Curve
```{r}
pSpecial <- ggplot(data=z, aes(x=ECM.tips.cm/(max(ECM.tips.cm + 0.1)), y=..density..)) +
  geom_histogram(color="grey60",fill="coral4",size=0.2) + 
  xlim(c(0,1)) +
  geom_density(size=0.75,linetype="dotted")

betaPars <- fitdistr(x=z$ECM.tips.cm/max(z$ECM.tips.cm + 0.1),start=list(shape1=1,shape2=2),"beta")
shape1ML <- betaPars$estimate["shape1"]
shape2ML <- betaPars$estimate["shape2"]

statSpecial <- stat_function(aes(x = xval, y = ..y..), fun = dbeta, colour="orchid", n = length(z$ECM.tips.cm), args = list(shape1=shape1ML,shape2=shape2ML))
pSpecial + statSpecial
```
####Which Graph looks better?
```{r}
normPars$loglik

gammaPars$loglik

expoPars$loglik
```
A Gamma distribution appears to fit my data the best.

### Determining Maximum Likelihood Parameters
```{r}
gammaPars <- fitdistr(z$ECM.tips.cm,"gamma")
print(gammaPars)
```

### Create a Fake Data Set to run on Function
```{r}
x <- rgamma(n=30,shape=1.3,scale=1/.204)
x <- data.frame(1:30,x)
names(x) <- list("GroupID","ECM.tips.cm")
x <- x[x$ECM.tips.cm>0,]
str(x)
```
####Making a Histogram for Fake Data Set
```{r}
p1 <- ggplot(data=x, aes(x=ECM.tips.cm, y=..density..)) +
  geom_histogram(color="grey60",fill="coral4",size=0.2) 
print(p1)
```
###Gamma Distribution for Fake Data
```{r}
gammaPars <- fitdistr(x$ECM.tips.cm,"gamma")
shapeML <- gammaPars$estimate["shape"]
rateML <- gammaPars$estimate["rate"]

stat4 <- stat_function(aes(x = xval, y = ..y..), fun = dgamma, colour="goldenrod", n = length(x$Height), args = list(shape=shapeML, rate=rateML))
 p1 + stat4
```
###Recreating a Normal Data Curve
```{r}
z <- read.table("ECMScores.csv",header=TRUE,sep=",", stringsAsFactors=FALSE)

p1 <- ggplot(data=z, aes(x=ECM.tips.cm, y=..density..)) +
  geom_histogram(color="grey60",fill="cornsilk",size=0.2) 


gammaPars <- fitdistr(z$ECM.tips.cm,"gamma")
shapeML <- gammaPars$estimate["shape"]
rateML <- gammaPars$estimate["rate"]

stat4 <- stat_function(aes(x = xval, y = ..y..), fun = dgamma, colour="goldenrod", n = length(z$ECM.tips.cm), args = list(shape=shapeML, rate=rateML))
 p1 + stat4
```

I think the simulated data does a pretty good job of of representing my actual data. Both the real and fake data do not fit the Gamma curve perfectly well, but it's still a pretty good fit overall. I think the simulated data does a little bit better job of fitting the data, but I think the is the normal case with R. This homework has been very informative in how you can simulate data to understand how it should be distributed.